String programming

1. Program to remove Duplicates from a String.

public class RemoveDup {

	public static void main(String[] args) {
		StringBuilder s=new StringBuilder("Lizzardss");		
		for(int i=0; i<s.length();i++) {			
			for(int j=i+1; j<s.length();j++) {			
				if(s.charAt(i)==s.charAt(j)) {
				s.deleteCharAt(i);
				}
			}		
		}	
		System.out.println(s);
	}
}

Output: Lizards

2. Program to print Duplicates characters from the String.

public class PrintDuplicate {

	public static void main(String[] args) {
		String s="Lizzardss";		
		for(int i=0; i<s.length();i++) {			
			for(int j=i+1; j<s.length();j++) {			
				if(s.charAt(i)==s.charAt(j)) {
					System.out.println(s.charAt(i));
				}
			}		
		}	
	}
}

Output: z
        s


3. Program to check if “2552” is palindrome or not.

public class Palindrome {

	public static void main(String[] args) {
		String s="2552";
		String s1="";
		for(int i=s.length()-1;i>=0;i--) {		
			s1=s1+s.charAt(i);			
		}		
		if(s.equals(s1))
		System.out.println("The string is a Palindrome");
		else {
			System.out.println("The string is not a Palindrome");
		}
	}
}

Output: The string is a Palindrome

4. Program to count the number of consonants, vowels, special characters in a String.

public class VowConsSpec {
	
	public static void main(String[] args) {

			String s="It is a string @1";

	        int vow = 0;
	        int cons= 0; 
	        int spec= 0;
	        
	        for (int i = 0; i < s.length(); i++) {              
	            char ch = s.charAt(i);   
	            if ( (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ) {
	                ch = Character.toLowerCase(ch);
	                if (ch == 'a' || ch == 'e' || ch == 'i' ||ch == 'o' || ch == 'u')
	                	vow++;
	                else
	                	cons++;
	            }
	            else if (ch >= '0' && ch <= '9')
	            {
	             	
	            }
	            else
	                spec++;
	        }
	          
	        System.out.println("The number of vowels: " + vow);
	        System.out.println("The number of consonants: " + cons);
	        System.out.println("The number of special character: " + spec);
	    }
}
	  
Output: 
The number of vowels: 4
The number of consonants: 7
The number of special character: 5


5. Program to implement Anagram checking with least inbuilt methods being used.

import java.util.Arrays;
class Anagram
{
 
public static void main(String[] args) {
	
		String s1="race";
		String s2="cArE";
		
		s1=s1.toLowerCase();
		s2=s2.toLowerCase();
		
		char[] ch1=s1.toCharArray();
		char[] ch2=s2.toCharArray();
		
		Arrays.sort(ch1);
		Arrays.sort(ch2);
		
		if(Arrays.equals(ch1, ch2)) {
			System.out.println("It's a anagram");
		}
		else {
			System.out.println("It's not a anagram");
		}
	}
}

Output: It's a anagram

6. Program to implement Pangram Checking with least inbuilt methods being used.

class Pangram
{
public static void main(String[] args) {
		boolean flag=false;	
		String s1="THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG";
				s1=s1.replace(" ","");
		char [] ch=s1.toCharArray();
		int [] ar=new int[26];
		
		for(int i=0;i<ch.length;i++) {
			int index=ch[i]-65;
			ar[index]++;
		}
		for(int i=0;i<ar.length;i++) {
			if(ar[i]==0) {
				System.out.println("It is not a pangram");
				flag=true;
			}
		}
		if(flag==false) {
			System.out.println("It is a pangram");
		}
	}
}

Output: It is a pangram

7. Program to find if String contains all unique characters.

public class UniqueChar {

	public static void main(String[] args) {
		String s="Pooja";
		boolean b=true;
		
		for(int i=0; i<s.length();i++) {
			for(int j=i+1; j<s.length();j++) {
				
				if(s.charAt(i)==s.charAt(j)) {
					
					System.out.println("The characters in string are not unique");
					b=false;		
				}	
			}				
		}	
		if(b==true)
		System.out.println("The characters in string are unique");
	}
}

Output: The characters in string are not unique


8. Program to find the maximum occurring character in a String.

public class MaxOccChar {

	public static void main(String[] args) {
		int size=256;
		String s="Einsteinn";
		int max = -1; 
            char result = ' ';
	      int count[] = new int[size];
	      
	        for (int i = 0; i < s.length(); i++)
	            count[s.charAt(i)]++;
	 
	        for (int i = 0; i < s.length(); i++) {
	            if (max < count[s.charAt(i)]) {
	                max = count[s.charAt(i)];
	                result = s.charAt(i);
	            }
	        }      
	        System.out.println("The maximum occuring character is "+result);	 
	    }
}

Output: The maximum occuring character is n
